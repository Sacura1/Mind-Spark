[
  {
    "question": "What happens to all NEX Devnet Points when Devnet closed?",
    "options": [
      "They are automatically converted to Devnet tokens in users' wallets",
      "They disappear",
      "They remain as points",
      "They turn into Ethereum"
    ],
    "answer": "They are automatically converted to Devnet tokens in users' wallets",
    "source": "0"
  },
  {
    "question": "What happened to NEX Devnet Points that were unclaimed by users at the Devnet\u2019s end?",
    "options": [
      "The system automatically claimed and converted them to tokens",
      "They were lost",
      "They remained as points",
      "They rolled over to mainnet"
    ],
    "answer": "The system automatically claimed and converted them to tokens",
    "source": "1"
  },
  {
    "question": "What phrase is used to describe Nexus in its main tagline?",
    "options": [
      "Layer 1 blockchain for the AI era",
      "World\u2019s first metaverse chain",
      "Decentralized social network",
      "Cloud storage solution"
    ],
    "answer": "Layer 1 blockchain for the AI era",
    "source": "2"
  },
  {
    "question": "What era is Nexus Layer 1 built for?",
    "options": [
      "AI era",
      "Blockchain era",
      "Web3 era",
      "Cloud era"
    ],
    "answer": "AI era",
    "source": "3"
  },
  {
    "question": "Nexus L1 concentrates the world\u2019s compute power into what?",
    "options": [
      "A single, ultra-high performance, EVM-compatible blockchain",
      "Multiple independent blockchains",
      "Centralized data centers",
      "A global supercomputer network"
    ],
    "answer": "A single, ultra-high performance, EVM-compatible blockchain",
    "source": "4"
  },
  {
    "question": "What does Nexus run inside every node of its blockchain?",
    "options": [
      "A zkVM",
      "A Bitcoin VM",
      "A traditional EVM",
      "A quantum processor"
    ],
    "answer": "A zkVM",
    "source": "5"
  },
  {
    "question": "How does the Nexus L1 become more powerful as the network grows?",
    "options": [
      "Every new node and every new release of the zkVM",
      "Increasing the block size automatically",
      "Generating more coins per block",
      "Reducing network fees"
    ],
    "answer": "Every new node and every new release of the zkVM",
    "source": "6"
  },
  {
    "question": "What does the Nexus OS enable users to do?",
    "options": [
      "Contribute compute, earn rewards, and participate in the ecosystem",
      "Manage centralized services",
      "Mine new blocks for the Nexus blockchain",
      "Only trade cryptocurrencies"
    ],
    "answer": "Contribute compute, earn rewards, and participate in the ecosystem",
    "source": "7"
  },
  {
    "question": "How is Nexus zkVM 3.0 described on the website?",
    "options": [
      "A general purpose virtual machine powering our world supercomputer",
      "A simple script interpreter",
      "A spreadsheet software",
      "A proprietary database"
    ],
    "answer": "A general purpose virtual machine powering our world supercomputer",
    "source": "8"
  },
  {
    "question": "Nexus zkVM is compatible with which of these programming languages?",
    "options": [
      "Rust",
      "Java",
      "Python",
      "JavaScript"
    ],
    "answer": "Rust",
    "source": "9"
  },
  {
    "question": "The Nexus zkVM emulates which processor architecture?",
    "options": [
      "RISC-V",
      "x86",
      "ARM",
      "MIPS"
    ],
    "answer": "RISC-V",
    "source": "10"
  },
  {
    "question": "Nexus zkVM 3.0 is approximately how many times faster than previous releases?",
    "options": [
      "1000× faster",
      "10× faster",
      "100× faster",
      "2× faster"
    ],
    "answer": "1000× faster",
    "source": "11"
  },
  {
    "question": "Under what principles is the Nexus zkVM developed?",
    "options": [
      "Open science and a formal specification",
      "Proprietary technology and secrecy",
      "Rapid prototyping without security",
      "Closed-source algorithms"
    ],
    "answer": "Open science and a formal specification",
    "source": "12"
  },
  {
    "question": "How much did Nexus raise in its Series A funding round?",
    "options": [
      "$25M",
      "$5M",
      "$100M",
      "$1M"
    ],
    "answer": "$25M",
    "source": "13"
  },
  {
    "question": "Nexus raised Series A funding to do what?",
    "options": [
      "Bring zero-knowledge proofs to internet scale",
      "Launch a new stablecoin",
      "Create a social media platform",
      "Develop a hardware wallet"
    ],
    "answer": "Bring zero-knowledge proofs to internet scale",
    "source": "14"
  },
  {
    "question": "Nexus Layer 1 is designed to host what on a planetary scale?",
    "options": [
      "Global commerce",
      "Video games",
      "IoT devices",
      "Microservices only"
    ],
    "answer": "Global commerce",
    "source": "15"
  },
  {
    "question": "What is the foundational role of Nexus Layer 1 blockchain?",
    "options": [
      "Processes transactions, secures the ledger, and powers smart contracts",
      "Mines new tokens every minute",
      "Hosts traditional databases",
      "Centralizes AI models"
    ],
    "answer": "Processes transactions, secures the ledger, and powers smart contracts",
    "source": "16"
  },
  {
    "question": "Nexus aims to concentrate global compute power into what?",
    "options": [
      "A single, cryptographically verifiable chain",
      "A group of shard chains",
      "A set of parallel blockchains",
      "A quantum computer"
    ],
    "answer": "A single, cryptographically verifiable chain",
    "source": "17"
  },
  {
    "question": "How does Nexus scale horizontally?",
    "options": [
      "By adding more nodes enabling distributed apps",
      "By increasing token inflation",
      "By doubling the block size only",
      "By reducing gas prices"
    ],
    "answer": "By adding more nodes enabling distributed apps",
    "source": "18"
  },
  {
    "question": "How does Nexus scale vertically?",
    "options": [
      "Through the Nexus zkVM allowing private, proof-enabled computation",
      "By printing more tokens",
      "By connecting to faster internet",
      "By merging with other chains"
    ],
    "answer": "Through the Nexus zkVM allowing private, proof-enabled computation",
    "source": "19"
  },
  {
    "question": "What autonomous capability does Nexus aim to provide?",
    "options": [
      "A secure environment for AI agents to transact and interact",
      "Autopilot cars",
      "Central bank digital currency",
      "Peer-to-peer file sharing"
    ],
    "answer": "A secure environment for AI agents to transact and interact",
    "source": "20"
  },
  {
    "question": "What is the Universal Proof in the context of Nexus?",
    "options": [
      "A unified zero-knowledge proof of all computation",
      "A magic number",
      "A quantum encryption key",
      "A type of consensus algorithm"
    ],
    "answer": "A unified zero-knowledge proof of all computation",
    "source": "21"
  },
  {
    "question": "Where is the original Nexus zkVM 1.0 whitepaper available?",
    "options": [
      "https://whitepaper.nexus.xyz",
      "https://docs.nexus.xyz",
      "https://github.com/nexus",
      "https://nexus.xyz"
    ],
    "answer": "https://whitepaper.nexus.xyz",
    "source": "22"
  },
  {
    "question": "What name is given to the ultimate Nexus vision?",
    "options": [
      "Universal Proof",
      "Infinite Ledger",
      "Nexus Singularity",
      "Global SuperAI"
    ],
    "answer": "Universal Proof",
    "source": "23"
  },
  {
    "question": "What emerges when the Universal Proof is achieved?",
    "options": [
      "A unified, global supercomputer",
      "A single private chain",
      "A fragmented set of networks",
      "A proprietary database"
    ],
    "answer": "A unified, global supercomputer",
    "source": "24"
  },
  {
    "question": "What foundation does Nexus claim is for an Internet of autonomous agents?",
    "options": [
      "A world where computation is provable, composable, and universally trusted",
      "A world of untraceable computation",
      "A world without smart contracts",
      "A world of centralized servers"
    ],
    "answer": "A world where computation is provable, composable, and universally trusted",
    "source": "25"
  },
  {
    "question": "How is the Nexus network described?",
    "options": [
      "A globally distributed proving system that functions as a verifiable supercomputer",
      "A social media platform",
      "A file storage network only",
      "A proof-of-work mining pool"
    ],
    "answer": "A globally distributed proving system that functions as a verifiable supercomputer",
    "source": "26"
  },
  {
    "question": "What do zero-knowledge proofs allow one to do?",
    "options": [
      "Prove a computation was done correctly without revealing inputs",
      "Encrypt messages with a public key",
      "Broadcast transactions faster",
      "Create tokens out of nothing"
    ],
    "answer": "Prove a computation was done correctly without revealing inputs",
    "source": "27"
  },
  {
    "question": "Which of these is cited as a use of zero-knowledge proofs?",
    "options": [
      "Prove smart contracts executed as intended",
      "Speed up physical calculations",
      "Ensure more mining rewards",
      "Host large media files"
    ],
    "answer": "Prove smart contracts executed as intended",
    "source": "28"
  },
  {
    "question": "What is a core component of the Nexus network?",
    "options": [
      "Nexus Orchestrator",
      "FTP server",
      "Email client",
      "Web browser"
    ],
    "answer": "Nexus Orchestrator",
    "source": "29"
  },
  {
    "question": "What is a responsibility of the Nexus Orchestrator?",
    "options": [
      "Routing proving tasks across the network",
      "Mining Bitcoin blocks",
      "Operating a search engine",
      "Printing fiat currency"
    ],
    "answer": "Routing proving tasks across the network",
    "source": "30"
  },
  {
    "question": "What does a Nexus network node do?",
    "options": [
      "Providing compute resources and generating proofs",
      "Storing private keys",
      "Operating a web server",
      "Manipulating transaction inputs"
    ],
    "answer": "Providing compute resources and generating proofs",
    "source": "31"
  },
  {
    "question": "What happens to NEX Devnet points after Devnet closure?",
    "options": [
      "They are converted to Devnet Tokens",
      "They are burned",
      "They expire",
      "They are traded on exchanges"
    ],
    "answer": "They are converted to Devnet Tokens",
    "source": "32"
  },
  {
    "question": "What is the chain ID for Nexus Layer 1?",
    "options": [
      "393",
      "1",
      "137",
      "56"
    ],
    "answer": "393",
    "source": "33"
  },
  {
    "question": "What is the native token of the Nexus chain?",
    "options": [
      "Nexus Token (NEX)",
      "NXS",
      "ETH",
      "BTC"
    ],
    "answer": "Nexus Token (NEX)",
    "source": "34"
  },
  {
    "question": "How did users earn Devnet Points during the Nexus Devnet phase?",
    "options": [
      "By proving via Nexus OS or CLI",
      "By staking Ether",
      "By trading NFTs",
      "By providing liquidity"
    ],
    "answer": "By proving via Nexus OS or CLI",
    "source": "35"
  },
  {
    "question": "How can users view their NEX Devnet Tokens in a wallet?",
    "options": [
      "By adding the Nexus network to their wallet using the provided settings",
      "By importing a CSV file",
      "By emailing support",
      "By scanning a QR code"
    ],
    "answer": "By adding the Nexus network to their wallet using the provided settings",
    "source": "36"
  },
  {
    "question": "Which runtime powers the Nexus Web App for compute proving?",
    "options": [
      "A Rust-based WebAssembly (WASM) runtime",
      "Java Runtime Environment",
      "Adobe Flash Player",
      "Oracle VM"
    ],
    "answer": "A Rust-based WebAssembly (WASM) runtime",
    "source": "37"
  },
  {
    "question": "What can users do via the Nexus Web App dashboard?",
    "options": [
      "Start/stop compute, track NEX Points, manage nodes, and redeem rewards",
      "Trade cryptocurrencies",
      "Mine Bitcoin",
      "Chat with support"
    ],
    "answer": "Start/stop compute, track NEX Points, manage nodes, and redeem rewards",
    "source": "38"
  },
  {
    "question": "What proving options does the Nexus Web App offer?",
    "options": [
      "Link to account or Anonymous proving",
      "Proof-of-work or Proof-of-stake modes",
      "Day or Night mode",
      "Public or Private mode"
    ],
    "answer": "Link to account or Anonymous proving",
    "source": "39"
  },
  {
    "question": "What is true about anonymous proving in the Nexus Web App?",
    "options": [
      "It does not earn NEX Points or rewards",
      "It doubles your NEX Points",
      "It requires a paid subscription",
      "It links to your wallet automatically"
    ],
    "answer": "It does not earn NEX Points or rewards",
    "source": "40"
  },
  {
    "question": "Why should you link your Nexus account in the Web App?",
    "options": [
      "To earn NEX Points for contributions and track them on a leaderboard",
      "To disable fees",
      "To publish NFTs",
      "To get free internet access"
    ],
    "answer": "To earn NEX Points for contributions and track them on a leaderboard",
    "source": "41"
  },
  {
    "question": "Which is a benefit of using the Nexus web-based app?",
    "options": [
      "Zero setup (no download or install required)",
      "Exclusive offline mode",
      "Guaranteed block rewards",
      "Unlimited storage space"
    ],
    "answer": "Zero setup (no download or install required)",
    "source": "42"
  },
  {
    "question": "What is the Nexus Network CLI?",
    "options": [
      "A command-line tool for contributing compute resources",
      "A web browser",
      "A cryptocurrency exchange",
      "A hardware device"
    ],
    "answer": "A command-line tool for contributing compute resources",
    "source": "43"
  },
  {
    "question": "What command installs the Nexus CLI tool?",
    "options": [
      "curl https://cli.nexus.xyz/ | sh",
      "npm install -g nexus-cli",
      "brew install nexus",
      "apt-get install nexus-cli"
    ],
    "answer": "curl https://cli.nexus.xyz/ | sh",
    "source": "44"
  },
  {
    "question": "Where are the Nexus CLI credentials saved by default?",
    "options": [
      "~/.nexus/credentials.json",
      "~/.config/nexus",
      "~/.nex/credentials",
      "~/.credentials/nexus.json"
    ],
    "answer": "~/.nexus/credentials.json",
    "source": "45"
  },
  {
    "question": "What command logs a user out of the Nexus CLI?",
    "options": [
      "nexus-network logout",
      "nexus-cli exit",
      "logout nexus",
      "nexus shutdown"
    ],
    "answer": "nexus-network logout",
    "source": "46"
  },
  {
    "question": "Which platforms support the Nexus CLI according to the docs?",
    "options": [
      "Linux, macOS, and Windows",
      "Android and iOS only",
      "Solaris and FreeBSD",
      "Nintendo Switch"
    ],
    "answer": "Linux, macOS, and Windows",
    "source": "47"
  },
  {
    "question": "What do Windows users need to install to run the Nexus CLI?",
    "options": [
      "Windows Subsystem for Linux (WSL)",
      "DirectX 12",
      "Visual Studio Code",
      "Nvidia CUDA"
    ],
    "answer": "Windows Subsystem for Linux (WSL)",
    "source": "48"
  },
  {
    "question": "What must you do the first time you run the Nexus CLI?",
    "options": [
      "Accept the terms of service and choose a proving mode",
      "Download all tokens",
      "Create a new blockchain",
      "Install a smartphone app"
    ],
    "answer": "Accept the terms of service and choose a proving mode",
    "source": "49"
  },
  {
    "question": "Which CLI proving mode will earn NEX Points?",
    "options": [
      "Linking to a Nexus account",
      "Anonymous proving",
      "Mining mode",
      "Secure shell mode"
    ],
    "answer": "Linking to a Nexus account",
    "source": "50"
  },
  {
    "question": "Does anonymous proving via the CLI earn NEX Points?",
    "options": [
      "No",
      "Yes, double",
      "Only on weekends",
      "Only for testnets"
    ],
    "answer": "No",
    "source": "51"
  },
  {
    "question": "What improvements are expected in Testnet III?",
    "options": [
      "Enhanced network stability",
      "Higher gas fees",
      "Less open-source code",
      "Reduced participation"
    ],
    "answer": "Enhanced network stability",
    "source": "52"
  },
  {
    "question": "What will be provided to users migrating from Devnet to Testnet III?",
    "options": [
      "Guidance and instructions for the transition",
      "Free mainnet tokens",
      "A different blockchain explorer",
      "Nothing, it\u2019s fully automated"
    ],
    "answer": "Guidance and instructions for the transition",
    "source": "53"
  },
  {
    "question": "What does every Nexus user automatically receive according to the Quickstart guide?",
    "options": [
      "An Ethereum-compatible wallet address",
      "1 Bitcoin",
      "A miner rig",
      "A hardware wallet"
    ],
    "answer": "An Ethereum-compatible wallet address",
    "source": "54"
  },
  {
    "question": "Can you use your existing MetaMask address on the Nexus chain?",
    "options": [
      "Yes, any existing Ethereum address works on Nexus",
      "No, you need a new key",
      "Only if you update MetaMask",
      "Only for certain tokens"
    ],
    "answer": "Yes, any existing Ethereum address works on Nexus",
    "source": "55"
  },
  {
    "question": "What is the second step to start transacting on Nexus chain?",
    "options": [
      "Add the Nexus network to your wallet with the provided details",
      "Click 'mint NFT'",
      "Restart your computer",
      "Claim tokens on faucet only"
    ],
    "answer": "Add the Nexus network to your wallet with the provided details",
    "source": "56"
  },
  {
    "question": "In the Hardhat config for Nexus, what network name is used?",
    "options": [
      "nexus",
      "mainnet",
      "rinkeby",
      "binance"
    ],
    "answer": "nexus",
    "source": "57"
  },
  {
    "question": "Which Hardhat plugin must be installed to verify contracts on Nexus?",
    "options": [
      "@nomicfoundation/hardhat-verify",
      "@nomiclabs/hardhat-waffle",
      "hardhat-deploy",
      "web3.js"
    ],
    "answer": "@nomicfoundation/hardhat-verify",
    "source": "58"
  },
  {
    "question": "What environment variables are needed for contract verification?",
    "options": [
      "PRIVATE_KEY and ETHERSCAN_API_KEY",
      "NODE_ENV and PORT",
      "INFURA_API_KEY",
      "AWS_SECRET_KEY"
    ],
    "answer": "PRIVATE_KEY and ETHERSCAN_API_KEY",
    "source": "59"
  },
  {
    "question": "What API URL is used for Etherscan in the Nexus Explorer plugin?",
    "options": [
      "https://explorer.nexus.xyz/api",
      "https://api.nexus.xyz",
      "https://etherscan.io/api",
      "https://api.gateway.nexus"
    ],
    "answer": "https://explorer.nexus.xyz/api",
    "source": "60"
  },
  {
    "question": "Where can you get test NEX tokens for deployment?",
    "options": [
      "The Nexus Faucet at hub.nexus.xyz",
      "By mining on GPU",
      "From the Ethereum mainnet",
      "From social media rewards"
    ],
    "answer": "The Nexus Faucet at hub.nexus.xyz",
    "source": "61"
  },
  {
    "question": "What is the Hardhat command to deploy contracts on Nexus?",
    "options": [
      "npx hardhat deploy --network nexus",
      "npx hardhat run scripts/deploy.js --network mainnet",
      "truffle migrate",
      "npm start"
    ],
    "answer": "npx hardhat deploy --network nexus",
    "source": "62"
  },
  {
    "question": "What Hardhat command verifies a deployed contract on Nexus via CLI?",
    "options": [
      "npx hardhat verify --network nexus <contract_address>",
      "npx hardhat test",
      "npm run verify",
      "forge verify"
    ],
    "answer": "npx hardhat verify --network nexus <contract_address>",
    "source": "63"
  },
  {
    "question": "Where on Nexus Explorer can you verify contracts using a web interface?",
    "options": [
      "The contract-verification page of Nexus Explorer",
      "The main dashboard",
      "User settings",
      "Token registry"
    ],
    "answer": "The contract-verification page of Nexus Explorer",
    "source": "64"
  },
  {
    "question": "How many code changes are needed to deploy a Solidity contract on Nexus?",
    "options": [
      "None",
      "Major rewrite",
      "Use a different language",
      "Double the contract size"
    ],
    "answer": "None",
    "source": "65"
  },
  {
    "question": "Which JavaScript library is mentioned for use on Nexus?",
    "options": [
      "ethers.js",
      "React",
      "Angular",
      "Django"
    ],
    "answer": "ethers.js",
    "source": "66"
  },
  {
    "question": "What is a Timelock Wallet?",
    "options": [
      "A smart contract that holds funds until a specified future time",
      "A wallet that automatically stakes all tokens",
      "A multi-signature wallet",
      "A phishing simulation tool"
    ],
    "answer": "A smart contract that holds funds until a specified future time",
    "source": "67"
  },
  {
    "question": "One use case for a timelock wallet is:",
    "options": [
      "Creating a savings account with built-in discipline (delayed disbursement)",
      "Real-time currency conversion",
      "High-frequency trading",
      "Anonymous donations"
    ],
    "answer": "Creating a savings account with built-in discipline (delayed disbursement)",
    "source": "68"
  },
  {
    "question": "Smart contracts are analogous to what example in the docs?",
    "options": [
      "A digital vending machine",
      "A self-driving car",
      "A digital camera",
      "A traditional bank"
    ],
    "answer": "A digital vending machine",
    "source": "69"
  },
  {
    "question": "Smart contracts on blockchain can be described as:",
    "options": [
      "Programs that execute code when certain conditions are met",
      "Random number generators",
      "Manual consensus protocols",
      "Social media profiles"
    ],
    "answer": "Programs that execute code when certain conditions are met",
    "source": "70"
  },
  {
    "question": "What does 'pragma solidity ^0.8.0' specify in a smart contract?",
    "options": [
      "The compiler version of Solidity",
      "The size of the blockchain",
      "The amount of gas",
      "The network name"
    ],
    "answer": "The compiler version of Solidity",
    "source": "71"
  },
  {
    "question": "What is the purpose of an 'event' in Solidity?",
    "options": [
      "To log actions and state changes on the blockchain",
      "To encrypt messages",
      "To transfer Ether",
      "To mine blocks"
    ],
    "answer": "To log actions and state changes on the blockchain",
    "source": "72"
  },
  {
    "question": "When does the constructor of a contract run?",
    "options": [
      "Once when the contract is deployed",
      "Every time the contract is called",
      "Every block",
      "After the contract is destroyed"
    ],
    "answer": "Once when the contract is deployed",
    "source": "73"
  },
  {
    "question": "Who can call a public function in a Solidity contract?",
    "options": [
      "Anyone (external accounts or contracts)",
      "Only the contract owner",
      "Only miners",
      "No one, it\u2019s internal"
    ],
    "answer": "Anyone (external accounts or contracts)",
    "source": "74"
  },
  {
    "question": "Who can call an internal function in Solidity?",
    "options": [
      "Only the contract itself and derived contracts",
      "Any user",
      "Only contract creator",
      "Validators"
    ],
    "answer": "Only the contract itself and derived contracts",
    "source": "75"
  },
  {
    "question": "What does a public state variable automatically create?",
    "options": [
      "A getter function",
      "A setter function",
      "No extra code",
      "A random number"
    ],
    "answer": "A getter function",
    "source": "76"
  },
  {
    "question": "What license is used in the example smart contracts?",
    "options": [
      "MIT",
      "GPLv3",
      "Apache-2.0",
      "Proprietary"
    ],
    "answer": "MIT",
    "source": "77"
  },
  {
    "question": "What is the name of the event in the example SimpleStorage contract?",
    "options": [
      "DataStored",
      "ValueChanged",
      "Log",
      "SetValue"
    ],
    "answer": "DataStored",
    "source": "78"
  },
  {
    "question": "What does the 'set' function do in the example contract?",
    "options": [
      "Stores the given value and emits an event",
      "Deletes all data",
      "Moves the contract to a new address",
      "Mints new tokens"
    ],
    "answer": "Stores the given value and emits an event",
    "source": "79"
  },
  {
    "question": "What does the 'get' function return in the example contract?",
    "options": [
      "The stored data value",
      "The current block timestamp",
      "The contract owner",
      "An error message"
    ],
    "answer": "The stored data value",
    "source": "80"
  },
  {
    "question": "Which modifier indicates a Solidity function does not modify state?",
    "options": [
      "view",
      "pure",
      "public",
      "private"
    ],
    "answer": "view",
    "source": "81"
  },
  {
    "question": "Which modifier indicates a function neither reads nor modifies state?",
    "options": [
      "pure",
      "view",
      "constant",
      "nonpayable"
    ],
    "answer": "pure",
    "source": "82"
  },
  {
    "question": "Which condition will cause the Lock contract\u2019s withdraw() to revert?",
    "options": [
      "Called before unlockTime or by a non-owner",
      "If called after unlockTime",
      "If the contract is empty",
      "If the owner is null"
    ],
    "answer": "Called before unlockTime or by a non-owner",
    "source": "83"
  },
  {
    "question": "Who can withdraw from the Lock contract after the unlock time?",
    "options": [
      "Only the owner (deployer) of the contract",
      "Anyone with a Nexus account",
      "Only Nexus operators",
      "The contract itself"
    ],
    "answer": "Only the owner (deployer) of the contract",
    "source": "84"
  },
  {
    "question": "What must be true of _unlockTime when deploying the Lock contract?",
    "options": [
      "It must be a timestamp in the future",
      "It must be exactly the current time",
      "It must be before the current block",
      "It can be any past time"
    ],
    "answer": "It must be a timestamp in the future",
    "source": "85"
  },
  {
    "question": "What is the main purpose of the Lock contract?",
    "options": [
      "A time-locked vault for ETH",
      "A token swap",
      "A voting registry",
      "A random number generator"
    ],
    "answer": "A time-locked vault for ETH",
    "source": "86"
  },
  {
    "question": "Which parameters does the Lock contract constructor require?",
    "options": [
      "A future unlockTime and a payable ETH deposit",
      "A token address and amount",
      "No parameters",
      "An oracle address"
    ],
    "answer": "A future unlockTime and a payable ETH deposit",
    "source": "87"
  },
  {
    "question": "What event does the Lock contract emit?",
    "options": [
      "Withdrawal(uint amount, uint when)",
      "Locked(address indexed)",
      "Transferred(uint256)",
      "TimeUnlocked()"
    ],
    "answer": "Withdrawal(uint amount, uint when)",
    "source": "88"
  },
  {
    "question": "Which of these is a use case for the Lock contract?",
    "options": [
      "Time-based escrow or vesting",
      "High-frequency trading",
      "Instant messaging",
      "Virtual reality"
    ],
    "answer": "Time-based escrow or vesting",
    "source": "89"
  },
  {
    "question": "What command is used to deploy the Lock contract on Nexus?",
    "options": [
      "npx hardhat run scripts/deploy.js --network nexus",
      "npx truffle migrate",
      "npm run contract",
      "forge deploy"
    ],
    "answer": "npx hardhat run scripts/deploy.js --network nexus",
    "source": "90"
  },
  {
    "question": "Where can you examine the deployed Lock contract?",
    "options": [
      "Nexus Explorer",
      "GitHub",
      "Etherscan",
      "MetaMask"
    ],
    "answer": "Nexus Explorer",
    "source": "91"
  },
  {
    "question": "What information can Nexus Explorer show for your contract?",
    "options": [
      "Contract code, transaction history, balance, interactions",
      "Your private keys",
      "Off-chain user data",
      "Accelerated gas fees"
    ],
    "answer": "Contract code, transaction history, balance, interactions",
    "source": "92"
  },
  {
    "question": "In the project structure, where is the Lock.sol file located?",
    "options": [
      "contracts/ folder",
      "scripts/ folder",
      "frontend/ folder",
      "node_modules/"
    ],
    "answer": "contracts/ folder",
    "source": "93"
  },
  {
    "question": "In the project structure, where is the deploy.js file located?",
    "options": [
      "scripts/ folder",
      "contracts/ folder",
      "build/ folder",
      "src/ folder"
    ],
    "answer": "scripts/ folder",
    "source": "94"
  },
  {
    "question": "Which programming pattern does the deployment script illustrate?",
    "options": [
      "Using async/await to handle deployment and verification",
      "Recursive loops",
      "GPU parallelism",
      "Immediate transaction sending"
    ],
    "answer": "Using async/await to handle deployment and verification",
    "source": "95"
  },
  {
    "question": "What does the deployment script check for after verifying?",
    "options": [
      "It checks if the contract is already verified",
      "It checks for double spending",
      "It halts the blockchain",
      "It sends a notification email"
    ],
    "answer": "It checks if the contract is already verified",
    "source": "96"
  },
  {
    "question": "What is the HTTP RPC endpoint for the Nexus network?",
    "options": [
      "https://rpc.nexus.xyz/http",
      "https://api.nexus.xyz",
      "https://rpc.nexus.com",
      "https://nexus.api.net"
    ],
    "answer": "https://rpc.nexus.xyz/http",
    "source": "97"
  },
  {
    "question": "What is the WebSocket (WS) RPC endpoint for the Nexus network?",
    "options": [
      "wss://rpc.nexus.xyz/ws",
      "ws://rpc.nexus.xyz",
      "wss://nexus.net/ws",
      "ws://localhost:9933"
    ],
    "answer": "wss://rpc.nexus.xyz/ws",
    "source": "98"
  },
  {
    "question": "What is the chain ID used in Nexus\u2019s MetaMask configuration?",
    "options": [
      "393",
      "1337",
      "1",
      "42"
    ],
    "answer": "393",
    "source": "99"
  },
  {
    "question": "Which wallet is mentioned for integration in the Nexus NFT example?",
    "options": [
      "MetaMask",
      "Coinbase Wallet",
      "Trust Wallet",
      "Phantom"
    ],
    "answer": "MetaMask",
    "source": "100"
  },
  {
    "question": "Which front-end framework is used in the Nexus NFT Platform example?",
    "options": [
      "Next.js 13+",
      "Angular",
      "Vue.js",
      "Ember.js"
    ],
    "answer": "Next.js 13+",
    "source": "101"
  },
  {
    "question": "What is used for NFT image hosting in the Nexus NFT example?",
    "options": [
      "Firebase Storage",
      "IPFS",
      "AWS S3",
      "Dropbox"
    ],
    "answer": "Firebase Storage",
    "source": "102"
  },
  {
    "question": "Which library is used in the NFT example for blockchain interaction?",
    "options": [
      "ethers.js v6",
      "web3.js",
      "bitcoinjs",
      "solidity-ui"
    ],
    "answer": "ethers.js v6",
    "source": "103"
  },
  {
    "question": "Which data standard do TokenA and TokenB implement in the Token Swap example?",
    "options": [
      "ERC-20",
      "ERC-721",
      "ERC-1155",
      "BEP-20"
    ],
    "answer": "ERC-20",
    "source": "104"
  },
  {
    "question": "Which contract is imported in TokenSwap for token interface?",
    "options": [
      "IERC20",
      "ERC721",
      "AggregatorV3",
      "SafeMath"
    ],
    "answer": "IERC20",
    "source": "105"
  },
  {
    "question": "What ratio is used to swap Token A for Token B in the example?",
    "options": [
      "1:1",
      "2:1",
      "1:2",
      "Variable market rate"
    ],
    "answer": "1:1",
    "source": "106"
  },
  {
    "question": "Which CSS framework is used in the Token Swap example's frontend?",
    "options": [
      "Tailwind CSS",
      "Bootstrap",
      "Material UI",
      "Bulma"
    ],
    "answer": "Tailwind CSS",
    "source": "107"
  },
  {
    "question": "Which of these example apps is NOT listed in Nexus documentation?",
    "options": [
      "Voting App",
      "Counter",
      "NFT Platform",
      "Token Swap"
    ],
    "answer": "Voting App",
    "source": "108"
  },
  {
    "question": "Which Solidity visibility allows a function to be called by derived contracts?",
    "options": [
      "internal",
      "public",
      "private",
      "external"
    ],
    "answer": "internal",
    "source": "109"
  }
]
